filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
################################ Correlation & Drop #######################################
threshold = 0.5
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
# Scale data
df_s <- scale(df_new)
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 15)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
############################# CFA #################################################
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model2.txt") )
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
################################ Correlation & Drop #######################################
threshold = 0.5
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
# Scale data
df_s <- scale(df_new)
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 15)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
threshold = 0.8
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
# Scale data
df_s <- scale(df_new)
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 15)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
print(fa_s$loadings, cut= 0.5)
threshold = 0.5
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
# drop variables greater than threshold (0.5)
drop_cols <- corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]$xName
df_new <- df[,!(colnames(df) %in% drop_cols)]
orr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]
corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
################################ Correlation & Drop #######################################
threshold = 0.5
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
# drop variables greater than threshold (0.5)
drop_cols <- corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]$xName
df_new <- df[,!(colnames(df) %in% drop_cols)]
corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]
# Scale data
num_cols <- sapply(df_new, is.numeric)
df_s <- scale(df_new[,num_cols])
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
############################# CFA #################################################
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model2.txt") )
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
################################ Correlation & Drop #######################################
threshold = 0.5
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
# drop variables greater than threshold (0.5)
drop_cols <- corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]$xName
df_new <- df[,!(colnames(df) %in% drop_cols)]
corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]
# Scale data
num_cols <- sapply(df_new, is.numeric)
df_s <- scale(df_new[,num_cols])
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model2.txt") )
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
# Path Diagram
semPaths(cfa)
semPaths(cfa, whatLabels="est",
sizeMan = 1,
node.width = 1,
edge.label.cex = .3,
style = "ram",
mar = c(5, 5, 5, 5))
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
################################ Correlation & Drop #######################################
threshold = 0.5
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
# drop variables greater than threshold (0.5)
drop_cols <- corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]$xName
df_new <- df[,!(colnames(df) %in% drop_cols)]
corr_matrix[corr_matrix$corr > threshold | corr_matrix$corr < -threshold,]
# Scale data
num_cols <- sapply(df_new, is.numeric)
df_s <- scale(df_new[,num_cols])
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:50, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:22, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model2.txt") )
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
head(data.new)
threshold = 0.5
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
# Scale data
df_s <- scale(df_new)
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:21, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:50, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter<- sapply(1:22, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
threshold = 0.8
corr_matrix <- read.csv("./1_outfiles/corr_matrix.csv")
tmp <- cor(df[3:ncol(df)])
tmp[!lower.tri(tmp)] <- 0
df_new <-  df[3:ncol(df)][, !apply(tmp, 2, function(x) any(abs(x) > threshold))]
# Scale data
df_s <- scale(df_new)
# check if covariance matrix is invertable
det(cov(df_s))
# check dimensions
dim(df_s)
############################# EFA #################################################
# Check number of factors
fa_iter<- sapply(1:22, function(f) factanal(df_s, factors = f,lower = 1)$PVAL)
fa_iter
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s,factors = 4)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings2.csv"), row.names = TRUE)
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model2.txt") )
cfa <- sem(batting_model, S= cor(df_s), N = nrow(df_s) )
summary(cfa)
summary(cfa)
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
##########################  Exploratory Factor Analysis ###########################
num_cols <- sapply(df, is.numeric)
# Scale data
df_s <- scale(df[,num_cols])
# check if covariance matrix is invertable
det(cov(df_s))
# iterative process to determine which variables hinder EFA
drop_s <- c('home.runs','hit.batted.ball','Base.Running')
# run EFA numerous times with differing factors, analyse the pvalue
fa_iter<- sapply(1:85, function(f) factanal(df_s[,!(colnames(df_s) %in% drop_s)], factors = f,lower = 1)$PVAL)
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s[,!(colnames(df_s) %in% drop_s)],
factors = 4, lower = 0.05)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings.csv"), row.names = TRUE)
##########################  Confirmatory Factor Analysis ###########################
# Define key columns for CFA (remove Name, Team and at.bats)
key_cols <- c( 'Games.played',
'plate.appearances',
'hits',
'runs.scored',
'runs.batted.in',
'stolen.base',
'batting.average',
'on.base.perc',
'running.speed.score',
'hit.batted.ball',
'bat.exit.velocity',
'Clutch',
'Swing.perc',
'total.contact.perc',
'swing.strike.perc',
'ball.fastball.ratio',
'ball.sliders.ratio',
'ball.cutters.ratio',
'ball.curves.ratio',
'ball.changeups.ratio',
'ball.splitters.ratio',
'Wins.above.replacement')
# check determinant
det(cov(df[,key_cols]))
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model.txt") )
cfa <- sem(batting_model,S= cor(df_s[,key_cols]), N = nrow(df) )
cfa
# Path Diagram
semPaths(cfa, data = df_s[,key_cols])
# Load Libraries
library(sem)
library(dplyr)
library(corrplot)
#install.packages("lavaan", dependencies = TRUE)
#install.packages("semPlot")
library(semPlot)
library(RColorBrewer)
# set working directory and outpaths
setwd("G:/My Drive/Data Science/University/Texas Tech/Semester 2/Multivariate/Project/")
filepath = "./cleandata.csv"
# Set/create folder
outpath = "/4_outfiles"
if (!dir.exists(paste0(getwd(),outpath))){
dir.create(paste0(getwd(),outpath))
}else{
print("dir exists")
}
df = read.csv(filepath)
##########################  Exploratory Factor Analysis ###########################
num_cols <- sapply(df, is.numeric)
# Scale data
df_s <- scale(df[,num_cols])
# check if covariance matrix is invertable
det(cov(df_s))
# iterative process to determine which variables hinder EFA
drop_s <- c('home.runs','hit.batted.ball','Base.Running')
# run EFA numerous times with differing factors, analyse the pvalue
fa_iter<- sapply(1:85, function(f) factanal(df_s[,!(colnames(df_s) %in% drop_s)], factors = f,lower = 1)$PVAL)
plot(fa_iter, ylab = "p-value", xlab= "Number of factors", main = "EFA: p-value by number of factors", col = "orange")
# Run EFA and look at the cumulative proportion of the variance
fa_s<-factanal(df_s[,!(colnames(df_s) %in% drop_s)],
factors = 4, lower = 0.05)
print(fa_s$loadings, cut= 0.5)
#write factor loadings matrix
write.csv(round(fa_s$loadings,2), file = paste0(getwd(),outpath,"/factor_loadings.csv"), row.names = TRUE)
##########################  Confirmatory Factor Analysis ###########################
# Define key columns for CFA (remove Name, Team and at.bats)
key_cols <- c( 'Games.played',
'plate.appearances',
'hits',
'runs.scored',
'runs.batted.in',
'stolen.base',
'batting.average',
'on.base.perc',
'running.speed.score',
'hit.batted.ball',
'bat.exit.velocity',
'Clutch',
'Swing.perc',
'total.contact.perc',
'swing.strike.perc',
'ball.fastball.ratio',
'ball.sliders.ratio',
'ball.cutters.ratio',
'ball.curves.ratio',
'ball.changeups.ratio',
'ball.splitters.ratio',
'Wins.above.replacement')
# check determinant
det(cov(df[,key_cols]))
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model.txt") )
cfa <- sem(batting_model,S= cor(df_s[,key_cols]), N = nrow(df) )
cfa
# Path Diagram
semPaths(cfa, data = df_s[,key_cols])
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model.txt") )
cfa <- sem(batting_model,S= cor(df_s[,key_cols]), N = nrow(df) )
cfa
# Path Diagram
semPaths(cfa, data = df_s[,key_cols])
# Path Diagram
semPaths(cfa, data = df_s[,key_cols])
# Confirmatory Factor Analysis
options(fit.indices = c("GFI", "AGFI", "SRMR"))
batting_model <- specifyModel(file = paste0(getwd(),outpath,"/CFA_model.txt") )
cfa <- sem(batting_model,S= cor(df_s[,key_cols]), N = nrow(df) )
cfa
# Path Diagram
semPaths(cfa, data = df_s[,key_cols])
model <- cfa(batting_model, data= df[,key_cols] ,layout = "tree2")
model <- cfa(batting_model, data= df[,key_cols])
# Livaan library
library(lavaan)
batting_model <- '
runs =~ runs.scored + runs.batted.in + Clutch + on.base.perc
ball =~ ball.fastball.ratio + ball.sliders.ratio + ball.cutters.ratio + ball.curves.ratio + ball.changeups.ratio + ball.splitters.ratio
hitting =~ hits + runs.batted.in + batting.average + hit.batted.ball + bat.exit.velocity + Swing.perc + total.contact.perc + swing.strike.perc
non.batting =~  + plate.appearances + stolen.base + running.speed.score + Clutch + Wins.above.replacement + Wins.above.replacement + Games.played + plate.appearances
'
model <- cfa(batting_model, data= df[,key_cols])
summary(model)
semPaths(model, data = df_s[,key_cols])
summary(model)
